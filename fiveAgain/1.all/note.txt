1.跨域
跨域是因为浏览器的安全策略引起的一种现象，浏览器只允许访问本域下的内容
cookie localStorage默认不能跨域
不能跨域操作DOM元素 
link href
script src
img src 
上面三者可以跨域获取资源

同源策略是一种现象，他是浏览器最核心也是最基本的安全功能，如果没有同源策略，浏览器很容易被XSS CSRF攻击
同源是指 协议 域名 端口 三者相同

域名和域名对应的ip这也是一种跨域 
http://www.a.com
http://10.1.1.2

说明点 
1.如果是协议和端口的造成的跨域 前端是无能为力的
2.跨域是请求发出去了，服务器接收到了请求，并且数据也正常返回了，只是被浏览器给拦截了
3.通过表单的方式可以发起跨域请求，但是为什么ajax就不能，因为跨域的本质是阻止用户读取另一个域名下的内容，ajax可以获取到响应，浏览器认为这不安全，所以拦截了响应
但是表单发出请求之后，不会获取新的内容，所以可以发起跨域请求， 
同时这也说明浏览器的跨域并不能完全阻止CSRF，因为请求毕竟发出去了，并且到达了服务器
4.在跨域问题上，仅仅通过url首部来识别，而不会根据域名对应的ip地址是否相同来判断

jsonp
利用script标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的JSON数据 JSONP请求一定需要对方的服务器做支持才行
仅支持get方法，容易遭受XSS攻击

cors 
cors的解决方式需要浏览器和后端同时支持
浏览器会自动进行cors通信，实现cors通信的关键是后端，只要后端实现了cors，就实现了跨域
** 当访问的接口，跨域服务器没有返回值的时候，这时候浏览器不会出现跨域提示
简单请求：
只要满足两个条件就属于简单请求
条件1: 只能下列请求方法: GET POST HEAD
条件2: Content-Type的值只能是下面三个值text/plain multipart/form-data application/x-www-form-urlencoded
复杂请求: 不符合上面任意条件的都属于复杂请求
复杂请求的cors请求，会在正是通信之前，增加一次Http查询请求，称为预检请求，该请求是option方法，通过该请求来知道服务端是否允许跨域请求

postMessage
可以解决一下问题
页面和其打开的新窗口之间的数据传递
多页面之间的消息传递
页面和嵌套的iframe消息传递



