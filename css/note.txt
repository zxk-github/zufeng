2-1
HTML常见元素和理解
HTML版本
HTML元素分类
HTML元素的潜逃关系
HTML元素默认样式和定制化
HTML面试真题

HTML元素分类
1. header区域元素，包含页面的信息描述和一些资源的引用，内容不会直接显示在页面上
meta 
    <meta charset='utf-8' /> 
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" />
    <base href="/" /> 所有连接都会以这个基准
title 
style 
link 
script 
base
2. body区域的元素，标签中的内容会直接显示在页面上
div section article aside header footer
p
span em strong
table thead tbody tr td th 
ul ol li dl dt dd
a 
form input select option textarea button

HTML重要属性
a[href, target]
img[src, alt]
table td[colspan, rowspan]
form[target, method, enctype]
input[type, vlaue]
button[type]
select>option[value]
label[for]

如何理解HTML
HTML扮演的是一个结构的角色

HTML版本
HTML新增内容
1.新的区块标签
section article nav aside
2.表单增强
日期 时间 搜索
表单验证 
placeholder 自动聚焦
3.新加语义标签
header/footer
section/article
nav 导航
aside 不重要的内容，侧边栏
em strong强调
i 表示icon

HTML元素分类
1.按照默认样式分类
块级: block 独占一行有规则形状
行内: inline 不一定有规则形状
行内块: inline-block

2. 按照内容分

HTML嵌套关系
块级元素可以包含行内元素
块级元素不一定可以包含块级元素
行内元素一般不能包含块级元素(a可以包含块级元素，a标签在计算内容模型的时候，a不会被计算的，所以a是可以嵌套块级元素的)
p只能包含phrasing content，因为div不属于phrasing content 所以p包含div是不合法的
p > a > div  因为a是透明的 所以 p > div是不合法的

doctype的意义
1. 让浏览器以标准模式渲染
2. 让浏览器知道当前html版本，验证元素的合法性

HTML5有什么变化
1. 增加了新的语义话元素
2. 表单增强
3. 新的API(离线缓存，音视频，图形，实时通信，本地存储，设备能力)
4. 分类和嵌套变更

em和i之间区别
1. 默认效果都是斜体
2. em是语义话标签，表示强调
3. i是纯样式标签，表示斜体

语义话的意思 
1. 开发者更加容易理解
2. 机器容易理解结构(搜索引擎 读屏软件)
3. 有助于SEO

HTML和DOM之间的关系
HTML仅仅是字符串
DOM 是由HTML解析来的，可以通过js来维护

property和attribute区别
attribute是死的，写在HTML中的
property是活的，写在HTML中的属性，经过浏览器解析，会生成对应DOM的属性
attribute的改变和property改变不会相互影响

form标签作用
1. 可以直接提交表单
2. 可以使用reset/submit按钮
3. 使用浏览器保存功能
4. 一些第三方库表单验证需要配合form标签

css 
选择器是从右向左匹配，可以更快的匹配哪些元素不是

选择器分类
元素选择器 a{}
伪元素选择器 ::before{}
类选择器 .link{}
属性选择器 [type=radio]{}
伪类选择器 :hover{}
id选择器 #id{}
组合选择器 [typ=radio]+label{}
否定选择器 :not(.link) {}
通用选择器 *{}

选择器权重
ID选择器 #{} +100
类 属性 伪类 +10
元素 伪元素 +1
其他选择器 +0

行高
行高的构成
行高相关的现象和方案
行高的调整

顶线和底线之间就是文本占据的区域
字母的底部线称为基线(baseline)
默认文本都是按照基线对齐的
行高不会决定文本占据的区域，文本占据的区域仅仅是底线和顶线之间的距离，行高决定的是上下多余的宽度，会把父级撑起来

line-height垂直居中原理
行高是文本区域对于的宽度，如果行高高于元素所占的面积，元素会垂直居中

图片和文字在一起排列的时候，图片下面有空隙
因为图片也是行内元素，和文字默认都是基线对齐，基线和底线之间会存在一定空隙，空隙大小按照字体大小确定

背景
background: hsla(0, 100%, 50%, 0.3) 色相饱和度 
background: rgba()
 
滚动
visible 
hidden
scroll
auto

文字折行
overflow-wrap/word-wrap 是否保留单词
word-break 针对多字节文字 中文句子也是单词 normal break-all keep-all
white-space 空白处是否断行  nowrap

真题
1.css选择器优先级
计算权重
!important
内联样式
后写的优先级高

:checked+label美化选中框样式

一个元素可以设置多个阴影
box-shadow: x y 模糊 扩展 color insert
x y 模糊 扩展 color insert
x y 模糊 扩展 color insert;

text-shadow

border-radius: 10px 10px 10px 10px / 20px 20px 20px 20px; 水平方向 / 垂直方向
border-bottom-left-radius: 10px 20px; 水平方向 / 垂直方向

clip-path 裁剪
clip-path: inset(100px 50px)
clip-path: circle(100px at 100px 50px)
clip-path: polygon(50% 0， 100% 50%，50% 100%， 0 50%) 设置每个点位置

变换 tranform 仅仅变换
translate 位移
scale 缩放
skew 斜切
rotate 旋转

perspective: 500px; 设置透视距离 // 设置给父父级
transform-style: preserve-3d;  设置给父级

css动画 
1. transition 补间动画(给出开头和结尾，中间过程是补出来的)
2. keyframe 关键帧动画(设置一些时间点，但是时间点之间依旧是自动补充的)
3. 逐帧动画(画面中间没有办法计算)

补间动画
位置-平移(left right margin transform)
方位-旋转(transform)
大小-缩放(transform)
透明度(opacity)
其他-线性变换(transform)
transition: 动画属性(width) 动画时间
transition: width 1s, background 3s;
transition-delay: 1s; 动画延迟多长时间开始执行
transition-duration: 2s;动画执行时间
transition-timing-function: ease ease-in-out linear ease-in

关键帧动画 指定动画的关键位置，相当于多个补间动画
和补间动画区别：和元素状态无关，不需要刺激，直接就能执行动画

.container {
    width: 100px;
    # animation: run 1s linear;
    animation-direction: reverse(反向执行动画)；
    animation-iteration-count: 2(动画会被执行两次) infinite(无限循环)
    animation-play-state: pause(动画进行，还是停止在某一个位置)
    animation-fill-mode: forwards 保持在动画结束 backwords(回来)
    animation-timing-function: steps(1)指定关键帧之间有几个画面
}
@keyframes run{
    0% {
        width: 100px;
    }
    50% {
        width: 200px;
    }
    100% {
        width: 800px;
    }
}
@keyframes run{
    from {
        width: 100px;
    }
    to {
        width: 800px;
    }
}

逐帧动画 设置每个帧，不需要过度状态
主要适用于无法补间的动画

题
1.css实现动画的方式
transition
animation(keyframes)
2.过渡动画和关键帧动画的区别
a.过渡动画需要有状态的变化(需要刺激一下)
b.关键帧动画不需要刺激，直接就能自动运行
c.关键帧动画可以控制时间中间的状态，控制更加精细
3.如何实现逐帧动画
a.使用关键帧动画
b.去掉补间：设置animation-timing-function: steps(1);
4.css动画的性能
1.性能好于js



