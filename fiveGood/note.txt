new实现
function MyNew(fn, ...args) {
  let obj = Object.create(fn.prototype);
  let result = fn.apply(obj, args);
  return result instanceof Object? result : obj;
}

call apply实现
call/apply
var a = 1;
function fn() {
  console.log(this.a)
}
fn.call(null) 
fn.call(undefined)
** 当call传入null/undefined的时候，此时函数的this指向window，所以可以获取到全局环境中的变量
** 当传入的是其他简单数据类型会被Object()转换为对象

Function.prototype.myCall = function (context, ...args) {
  context = context == null ? window : Object(context);
  context.fn = this;
  let result = context.fn(...args);
  delete context.fn;
  return result;
};

Function.prototype.myApply = function(context, args = []) {
  context = context == null ? window : Object(context);
  context.fn = this;
  let result = context.fn(...args);
  delete context.fn;
  return result;
}

bind
1. bind方法改变函数内部this的指向
2. 函数如果有参数，可以在bind的时候传入，也可以在bind返回的函数执行时传入
3. new了bind返回的函数，创建的对象的构造函数依旧是原来的函数，如果原来的函数返回值是一个对象，那么new的结构就是这个对象，这个符合new的规则
4. new出来的对象，可以找到原函数原型上的属性和方法
Function.prototype.myBind = function(context, ...args) {
  context = context == null ? window : Object(context);
  const _this = this;
  return function F() {
    if(this instanceof F) {
      return new _this(...args, ...arguments);
    } else {
      return _this.apply(context, [...args, ...arguments]);
    }
  }
}

防抖和截流
防抖: 防止对此提交，只会执行最后一次提交  
使用：接口请求，数据校验
let debounce = (fn, delay = 300) => {
  let timer = null;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      fn.apply(null, args)
    }, delay)
  }
}
function fn() {console.log(arguments)};
let deb = debounce(fn, 300);
deb(1,2)

截流: 一段时间内只能生效一次触发，其他的忽略，方式高频触发
使用：resize 动画
let throttle = (fn, delay = 300) => {
  let flag = true;
  return (...args) => {
    if(!flag) return;
    flag = false;
    setTimeout(() => {
      fn.apply(null, args);
      flag = true;
    }, delay) 
  }
}
function fn() {
  console.log(arguments)
}

let thro = throttle(fn, 1000)
oBtn.onclick = function() {
  thro(1,2)
} 

模拟实现instanceof
function instance_of(ins, con) {
  let conProto = con.prototype;
  while(true) {
    let insProto = Object.getPrototypeOf(ins);
    if(insProto === null) return false;
    if(insProto === conProto) return true;  
  }
}

模拟Object.create()
function create(proto) {
  function F() {};
  F.prototype = proto;
  return new F();
}

如何实现一个模版引擎

// 字符串查找
function fn(a, b) {
  for(let i in b) {
    if(a[0] === b[i]) {
      let temp = true;
      for(let j in a) {
        if(a[j] !== b[Number(i)+ Number(j)]) {
          temp = false;
        }
      } 
      if(temp) {
        return i;
      }
    }
  }
  return -1;
}

周日
高阶函数
函数参数如果是函数，或者这个函数返回一个新的函数，我们就叫这个函数是高阶函数
function fn() {
  return function(){

  }
}
function fn(cb) {
  cb();
}
fn(() => {

})

AOP 编程
核心逻辑抽离出来，在它原有的基础上添加一下自己的逻辑


promise解决的问题
1. 回调地狱
2. 错误捕获。可以做到统一的错误处理
3. 不使用计数器也能进行多个异步同时并发

promise 三个状态 等待态 

generator 生成器 用来生成迭代器

es6
let申明的变量不会申明到全局作用域，就是不会成为window的一个属性

Symbol 独一无二
创建 Symbol(arg)
arg会调用toString方法转成字符串，所以一般都会是字符串或者数字，如果是对象，会被转成[object Object]

let obj = {};
obj[s2] = 1;  
console.log(obj); 
// 对象的Symbol类型的属性是不可枚举的，但是可以通过Object.getOwnPropertySymbols(obj)来获取对象的所有Symbol类型的key
for(let name in obj) {
  console.log(name);
}
console.log(Object.getOwnPropertySymbols(obj));  // 获取所有Symbol类型的key值

//Symbol.for(str) 当字符串相等的时候，不会重新创建一个Symbol对象，而是会返回原来的，所以当使用Symbol.for(str)创建一个Symbol对象的时候，str相同，值就相同
const s3 = Symbol.for('aaa');
const s4 = Symbol.for('aaa');
console.log(s3 === s4)
console.log(Symbol.keyFor(s3)) //获取创建Symbol的key值


Array.from() 和 ...的区别
Array.from()后面的类数组，会根据length属性进行循环，创建一个length长度的数组，元素个数超出length会被忽略，不够会被underfined填充
... 将一个类数组转换为一个数组，类数组必须具备Symbol.iterator接口
// Array.from() 和 ...的区别
console.log(Array.from({0: 1, 1: 2, 2: 3, length: 4}))  //[ 1, 2, 3, undefined ]
// console.log(...{0: 1, 1: 2, 2: 3, length: 4}) 报错

// 生成器(Symbol.iterator)函数执行会返回迭代器(generator),默认会不停的调用next()，直到done为true，此时的value会失效

let obj5 = {
    0: 1, 1: 2, [Symbol.iterator]() {
      let i = 0;
      return {
        next() {
          return {value: obj5[i], done: obj5[i++] === undefined}
        }
      }
    }
  }
console.log(...obj5); // 1,2

let obj6 = {
  0: 'a', 1: 'b', 
  [Symbol.iterator]: function *() {
    let i = 0;
    while(this[i] !== undefined) {
      yield this[i++] // {value: xx, done: xx}
    }
  }
}
console.log(...obj6); // 1, 2

JSON.parse(JSON.stringify(obj)) 缺陷

let obj3 = {
  a: 1,
  b: '2',
  c: true,
  d: undefined,
  e: null,
  f: false,
  g: function() {},
  h: [1,'2'],
  i: new Date(),
  j: /a/,
  k: '',
  l: []
}
let obj7 = JSON.parse(JSON.stringify(obj3));
{ a: 1,
  b: '2',
  c: true,
  e: null,
  f: false,
  h: [ 1, '2' ],
  i: '2019-09-02T13:33:32.576Z',
  j: {},
  k: '',
  l: [] }
// 会去除undefined,function,日期对象会被转为字符串，正则会被转换为{}, promsie对象会被转为{}
// 会改变原对象的constructor,所有clone之后的对象都指向Object
// 对象有循环引用会报错

Set
const set = new Set([1,2,4]); set具备iterator
s.keys()
s.values()
s.entries()
s.forEach()
s.has()
s.add()
s.size


weakMap key只能是对象


proxy定义拦截
proxy让我们以简洁易懂的方式控制了外部对对象的访问
proxy类似设计模式中的代理模式，通常应用于三个方面
1.拦截和监视外部对对象的访问

Object.defineProperty
1.需要遍历添加每一个key，只有已经添加进监听的属性才能起作用

proxy直接在对象层面上进行代理和拦截
1.可以完全代理某一个对象，只要对某个对象进行了get/set操作，都会触发对应的操作
let proxy = new Proxy(obj, { 创建一个代理会返回一个obj的代理对象，以后修改obj上的属性，都通过这个代理进行修改
  get() {

  },
  set() {

  }
})

如果代理的是数组，进行数组的操作的时候











